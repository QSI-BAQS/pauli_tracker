/*!
A C ABI wrapper around [pauli_tracker].

Since this crate is only a wrapper, we don't describe the general usage here. Following
the links should lead to this information. In case of function wrappers, remove the
prefix (cf. [#generics](self#generics)) and view the documentation of the original
function in [pauli_tracker's docs] (use docsrs' search functionality).

# Generics

The [pauli_tracker] library is highly generic. This is not translatable to a C API.
Instead we provide only explicit types and functions. The naming conventions is as
follows: A type A with explicit generic parameters B, C, ... has an explicit type alias

`A_<shorthand_B><shorthand_C>...`

Analogously, a function f, which is a wrapper around a method of A, has the name

`a_<shorthand_B><shorthand_C>..._f`

The header also provides alternative names for the types, automatically generated by
cbindgen. These names can also be used, but using the types documented here is
preferred.

# Safety considerations

The API is built around (raw) pointers, so all the usual safety considerations apply,
e.g., no dangling pointers, no double free, char pointers must be valid and
null-terminated, etc. For that matter, do never perform operations on an object that was
created on the Rust side, that might cause reallocations which are not controlled by the
Rust side (except you really know what you are doing; mixing allocators ...); things
might blow up!

[pauli_tracker]: https://github.com/taeruh/pauli_tracker
[pauli_tracker's docs]: https://docs.rs/pauli_tracker/latest/pauli_tracker/
*/

/// This struct can be used to build a native `Vec<T>` for easier ergonomics, however,
/// keep the [safety considerations](self#safety-considerations) in mind.
#[repr(C)]
pub struct RawVec<T> {
    /// Pointer to the start of the vector.
    pub data: *mut T,
    /// The length of the vector.
    pub len: usize,
}

pub mod boolean_vector;
pub mod collection;
pub mod pauli;
pub mod tracker;
